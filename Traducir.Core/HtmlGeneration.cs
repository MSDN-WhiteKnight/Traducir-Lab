/* Traducir Lab
 * Copyright (c) 2021,  MSDN.WhiteKnight (https://github.com/MSDN-WhiteKnight)
 * License: MIT */
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Traducir.Core.Models;
using Traducir.Core.Services;

namespace Traducir.Core
{
    public static class HtmlGeneration
    {
        private const string SiteFooter = @"<hr/><i><p>
This document was automatically generated by <a href=""https://github.com/MSDN-WhiteKnight/Traducir-Lab"">Traducir.Wpf</a>. 
Strings content is exported from <a href=""https://ru.stackoverflow.com"">Stack Overflow</a> localization system.</p><p>
Copyright (c) Stack Exchange Inc. (source strings)<br/>
Copyright (c) Stack Overflow in Russian community (translations)<br/>
Copyright (c) MSDN.WhiteKnight (other content)
</p></i>";

        public static string DateToString(DateTime dt)
        {
            return dt.ToString("dd.MM.yyyy", CultureInfo.InvariantCulture);
        }

        public static string DateTimeToString(DateTime dt)
        {
            return dt.ToString("dd.MM.yyyy HH:mm", CultureInfo.InvariantCulture);
        }

        public static async Task WriteTemplatedPage(string title, string body, TextWriter target)
        {
            string template;
            Assembly ass = Assembly.GetExecutingAssembly();

            using (Stream stream = ass.GetManifestResourceStream("Traducir.Core.Resources.templ.htm"))
            using (StreamReader reader = new StreamReader(stream))
            {
                template = await reader.ReadToEndAsync();
            }

            string output = template;
            output = output.Replace("{@title}", title);
            output = output.Replace("{@body}", body);
            await target.WriteAsync(output);
        }

        public static async Task StringsToHTML(IEnumerable<SOString> strings, TextWriter target)
        {
            await target.WriteLineAsync("<h1>Recent strings for translation</h1>");

            await target.WriteLineAsync("<p><i>updated " + DateTimeToString(DateTime.Now) + "</i></p>");

            foreach (SOString str in strings)
            {
                string str_text = WebUtility.HtmlEncode(str.OriginalString);
                str_text = str_text.Replace("\n", string.Empty);
                str_text = str_text.Replace("\r", string.Empty);

                if (str_text.Length > 200)
                {
                    str_text = str_text.Substring(0, 195) + "...";
                }

                await target.WriteAsync("<p>");
                await target.WriteAsync(DateToString(str.CreationDate) + " - ");

                string key_normalized = str.Key.Replace('|', '_');

                await target.WriteAsync("<a href=\"https://ru.traducir.win/filters?key=" + WebUtility.UrlEncode(str.Key));
                await target.WriteAsync("\">" + str_text + "</a>&nbsp;");
                await target.WriteAsync("(<a href=\"./strings/" + WebUtility.UrlEncode(key_normalized));
                await target.WriteAsync(".htm\">history</a>)");
                await target.WriteAsync("</p>");
                await target.WriteAsync(Environment.NewLine);
            }

            await target.FlushAsync();
        }

        public static async Task<string> StringsToHTML(IEnumerable<SOString> strings)
        {
            StringBuilder sb = new StringBuilder(5000);
            StringWriter wr = new StringWriter(sb);
            await StringsToHTML(strings, wr);
            return sb.ToString();
        }

        public static async Task HistoryToHTML(SOStringService svc, SOString str, TextWriter target)
        {
            await target.WriteLineAsync("<html><head><title>String translation history - Traducir Lab</title>");
            await target.WriteLineAsync("</head><body><h1>String translation history</h1>");

            var suggestions = await svc.GetSuggestionsByString(str.Id);

            await target.WriteAsync("<p>");
            await target.WriteAsync("<b>Key:</b> ");
            await target.WriteAsync("<a href=\"https://ru.traducir.win/filters?key=" + WebUtility.UrlEncode(str.Key));
            await target.WriteAsync("\">" + str.Key + "</a><br/>");
            await target.WriteAsync("<b>Created:</b> " + DateToString(str.CreationDate) + "</p>");

            await target.WriteLineAsync("<p><b>Original string:</b> <br/>");
            await target.WriteLineAsync(WebUtility.HtmlEncode(str.OriginalString));
            await target.WriteLineAsync("</p>");

            if (str.HasTranslation)
            {
                await target.WriteLineAsync("<p><b>Current translation:</b> <br/>");
                await target.WriteLineAsync(WebUtility.HtmlEncode(str.Translation));
                await target.WriteLineAsync("</p>");
            }

            await target.WriteLineAsync();

            if (suggestions.Length == 0)
            {
                await target.WriteLineAsync("<p><i>(No suggestions found)</i></p>");
            }

            for (int i = 0; i < suggestions.Length; i++)
            {
                await target.WriteLineAsync("<h2>Suggestion #" + (i + 1).ToString(CultureInfo.InvariantCulture) +
                    "</h2><p> ");

                await target.WriteAsync(WebUtility.HtmlEncode(suggestions[i].Suggestion));

                await target.WriteAsync("</p><p><b>Author:</b> <a href=\"https://ru.stackoverflow.com/users/");
                await target.WriteAsync(suggestions[i].CreatedById.ToString(CultureInfo.InvariantCulture));
                await target.WriteAsync("/\">");
                await target.WriteAsync(WebUtility.HtmlEncode(suggestions[i].CreatedByName));
                await target.WriteAsync("</a><br/>");

                await target.WriteAsync("<b>State:</b> " + suggestions[i].State.ToString());
                await target.WriteLineAsync("</p>");

                await target.WriteLineAsync("<table border=\"1\" cellpadding=\"4\"><tr>");
                await target.WriteLineAsync("<th>Date</th>");
                await target.WriteLineAsync("<th>User</th>");
                await target.WriteLineAsync("<th>Action</th>");
                await target.WriteLineAsync("<th>Comment</th></tr>");

                for (int j = 0; j < suggestions[i].Histories.Length; j++)
                {
                    await target.WriteLineAsync("<tr>");

                    var hist = suggestions[i].Histories[j];
                    await target.WriteAsync("<td>" + DateTimeToString(hist.CreationDate) + "</td>");
                    await target.WriteAsync("<td>");

                    await target.WriteAsync("<a href=\"https://ru.stackoverflow.com/users/");
                    await target.WriteAsync(hist.UserId.ToString(CultureInfo.InvariantCulture));
                    await target.WriteAsync("/\">");
                    await target.WriteAsync(WebUtility.HtmlEncode(hist.UserName));
                    await target.WriteAsync("</a>");

                    await target.WriteAsync("</td><td>");
                    await target.WriteAsync(hist.HistoryType.ToString());
                    await target.WriteAsync("</td><td>");

                    if (!string.IsNullOrEmpty(hist.Comment))
                    {
                        await target.WriteAsync(WebUtility.HtmlEncode(hist.Comment));
                    }

                    await target.WriteLineAsync("</td></tr>");
                }

                await target.WriteLineAsync("</table>");
            }

            await target.WriteLineAsync(SiteFooter);
            await target.WriteLineAsync("</body></html>");
        }
    }
}
